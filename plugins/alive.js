const { malvin } = require("../malvin");
const config = require("../settings");
const { runtime } = require('../lib/functions');
const moment = require("moment-timezone");

// Primary & fallback images
const ALIVE_IMG = "https://url.bwmxmd.online/Adams.xm472dqv.jpeg";
const FALLBACK_IMG = "https://i.imgur.com/tAKB8DP.jpeg";

malvin({
    pattern: "alive",
    desc: "Check if AKIDA bot is active",
    category: "main",
    react: "‚ö°",
    filename: __filename
}, async (malvin, mek, m, { reply, from }) => {
    try {
        const pushname = m.pushName || "User";
        const username = `@${m.sender.split('@')[0]}`;
        const timezone = "Africa/Nairobi";
        const now = moment().tz(timezone);
        const currentTime = now.format("hh:mm:ss A");
        const currentDate = now.format("dddd, MMMM Do YYYY");
        const uptime = runtime(process.uptime());

        // Fancy small-caps stylizer
        const fancy = (txt) =>
            txt.split('').map(c => {
                const t = {
                    A:'·¥Ä',B:' ô',C:'·¥Ñ',D:'·¥Ö',E:'·¥á',F:'“ì',G:'…¢',H:' ú',I:'…™',
                    J:'·¥ä',K:'·¥ã',L:' ü',M:'·¥ç',N:'…¥',O:'·¥è',P:'·¥ò',Q:'«´',R:' Ä',
                    S:'s',T:'·¥õ',U:'·¥ú',V:'·¥†',W:'·¥°',X:'x',Y:' è',Z:'·¥¢'
                };
                return t[c.toUpperCase()] || c;
            }).join('');

        const caption = `
‚ï≠‚îÅ‚îÅ‚îÅ„Äî ‚ö° ${fancy("AKIDA Alive")} ‚ö° „Äï‚îÅ‚îÅ‚îÅ‚ä∑
‚îÉ üëã  ú·¥á ü ü·¥è ${username}!
‚îÉ üß† …¥·¥Ä·¥ç·¥á : *${pushname}*
‚îÉ üïì ·¥õ…™·¥ç·¥á : *${currentTime}*
‚îÉ üìÖ ·¥Ö·¥Ä·¥õ·¥á : *${currentDate}*
‚îÉ ‚öôÔ∏è ·¥ç·¥è·¥Ö·¥á : *${config.MODE}*
‚îÉ üß≠ ·¥ú·¥ò·¥õ…™·¥ç·¥á : *${uptime}*
‚îÉ üëë ·¥è·¥°…¥·¥á Ä : *GURU*
‚îÉ üîó ·¥Ñ ú·¥Ä…¥…¥·¥á ü : https://tinyurl.com/2dgykp48
‚îÉ üíé ·¥†·¥á ÄÍú±…™·¥è…¥ : *${config.version || "2.0.0"}*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ä∑
> ${fancy("Powered by AKIDA ‚ú® Elegance. Precision. Speed.")}
`.trim();

        // Try sending main image first
        try {
            await malvin.sendMessage(from, {
                image: { url: ALIVE_IMG },
                caption,
                mentions: [m.sender],
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363299029326322@newsletter',
                        newsletterName: 'AKIDA | GURU',
                        serverMessageId: 143
                    }
                }
            }, { quoted: mek });
        } catch (err) {
            // Fallback if main image fails
            await malvin.sendMessage(from, {
                image: { url: FALLBACK_IMG },
                caption: caption + "\n\n‚ö†Ô∏è Primary image unavailable ‚Äî using fallback.",
                mentions: [m.sender]
            }, { quoted: mek });
        }

    } catch (err) {
        console.error("‚ùå Alive Command Error:", err.message);
        return reply(`‚ùå *Alive Command Error:*\n${err.message}`);
    }
});

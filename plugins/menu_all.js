const config = require('../settings');
const moment = require('moment-timezone');
const { malvin, commands } = require('../malvin');
const { getPrefix } = require('../lib/prefix');

// Stylized uppercase letters like ·¥ç·¥á…¥·¥ú
function toUpperStylized(str) {
  const stylized = {
    A: '·¥Ä', B: ' ô', C: '·¥Ñ', D: '·¥Ö', E: '·¥á', F: '“ì', G: '…¢', H: ' ú',
    I: '…™', J: '·¥ä', K: '·¥ã', L: ' ü', M: '·¥ç', N: '…¥', O: '·¥è', P: '·¥ò',
    Q: '«´', R: ' Ä', S: 's', T: '·¥õ', U: '·¥ú', V: '·¥†', W: '·¥°', X: 'x',
    Y: ' è', Z: '·¥¢'
  };
  return str.split('').map(c => stylized[c.toUpperCase()] || c).join('');
}

// Normalize categories
const normalize = str => str.toLowerCase().replace(/\s+menu$/, '').trim();

// Emojis by category
const emojiByCategory = {
  ai: 'ü§ñ', anime: 'üç•', audio: 'üéß', bible: 'üìñ', download: '‚¨áÔ∏è',
  downloader: 'üì•', fun: 'üéÆ', game: 'üïπÔ∏è', group: 'üë•', img_edit: 'üñåÔ∏è',
  info: '‚ÑπÔ∏è', information: 'üß†', logo: 'üñºÔ∏è', main: 'üè†', media: 'üéûÔ∏è',
  menu: 'üìú', misc: 'üì¶', music: 'üéµ', other: 'üìÅ', owner: 'üëë',
  privacy: 'üîí', search: 'üîé', settings: '‚öôÔ∏è', sticker: 'üåü',
  tools: 'üõ†Ô∏è', user: 'üë§', utilities: 'üß∞', utility: 'üßÆ',
  wallpapers: 'üñºÔ∏è', whatsapp: 'üì±'
};

// Random backgrounds (you can edit or add your own)
const backgroundImages = [
  'https://url.bwmxmd.online/Adams.zjrmnw18.jpeg',
  'https://telegra.ph/file/2ccf21b77a7b350d1b872.jpg',
  'https://telegra.ph/file/7e13a0569b3d41dcf5147.jpg',
  'https://telegra.ph/file/3b6e3b4529e48c626d78b.jpg',
  'https://telegra.ph/file/4f6a8d3871e79cb0d8c1a.jpg',
  'https://telegra.ph/file/43d1cc74ed94789d5e1fc.jpg',
  'https://telegra.ph/file/57edc41d2e5b42ce7e4f1.jpg',
  'https://telegra.ph/file/8f33dcd21944c10f7c5c9.jpg'
];

malvin({
  pattern: 'menu',
  alias: ['allmenu'],
  desc: 'Show all bot commands with background',
  category: 'menu',
  react: '‚ú®',
  filename: __filename
}, async (malvin, mek, m, { from, sender, reply }) => {
  try {
    const prefix = getPrefix();
    const timezone = config.TIMEZONE || 'Africa/Nairobi';
    const time = moment().tz(timezone).format('HH:mm:ss');
    const date = moment().tz(timezone).format('dddd, DD MMMM YYYY');

    const uptime = () => {
      const sec = process.uptime();
      const h = Math.floor(sec / 3600);
      const m = Math.floor((sec % 3600) / 60);
      const s = Math.floor(sec % 60);
      return `${h}h ${m}m ${s}s`;
    };

    // Menu header
    let menu = `
‚ï≠‚ïê‚ïê‚ïê„Äò *${toUpperStylized('Akida Bot Menu')}* „Äô‚ïê‚ïê‚ïê‚ïÆ
‚îÇ üë§ *User:* @${sender.split('@')[0]}
‚îÇ ‚öôÔ∏è *Mode:* ${config.MODE}
‚îÇ üïí *Time:* ${time}
‚îÇ üìÖ *Date:* ${date}
‚îÇ ‚è±Ô∏è *Runtime:* ${uptime()}
‚îÇ üß© *Plugins:* ${commands.length}
‚îÇ üí´ *Prefix:* ${config.PREFIX}
‚îÇ üëë *Owner:* ${config.OWNER_NAME}
‚îÇ üß† *Dev:* Guru
‚îÇ üöÄ *Version:* 2.0.0
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ
`;

    // Build command categories
    const categories = {};
    for (const cmd of commands) {
      if (cmd.category && !cmd.dontAdd && cmd.pattern) {
        const normalizedCategory = normalize(cmd.category);
        categories[normalizedCategory] = categories[normalizedCategory] || [];
        categories[normalizedCategory].push(cmd.pattern.split('|')[0]);
      }
    }

    // Add each category to the menu
    for (const cat of Object.keys(categories).sort()) {
      const emoji = emojiByCategory[cat] || 'üí´';
      menu += `\n*‚ï≠‚îÄ‚ùè ${emoji} ${toUpperStylized(cat)} ·¥ç·¥á…¥·¥ú ‚ùè*`;
      for (const cmd of categories[cat].sort()) {
        menu += `\n*‚îÇ‚Ä¢ ${prefix}${cmd}*`;
      }
      menu += `\n*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì*`;
    }

    menu += `\n\n> ‚ö° ${toUpperStylized('Explore the power of Akida!')}`;

    // Choose a random background
    const backgroundImage =
      config.MENU_IMAGE_URL ||
      backgroundImages[Math.floor(Math.random() * backgroundImages.length)];

    // Send menu with background image
    await malvin.sendMessage(
      from,
      {
        image: { url: backgroundImage },
        caption: menu,
        contextInfo: {
          mentionedJid: [sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid:
              config.NEWSLETTER_JID || '120363299029326322@newsletter',
            newsletterName: config.OWNER_NAME || 'Akida Updates',
            serverMessageId: 143
          }
        }
      },
      { quoted: mek }
    );

    // Optional: send menu sound
    if (config.MENU_AUDIO_URL) {
      await new Promise(r => setTimeout(r, 1000));
      await malvin.sendMessage(
        from,
        {
          audio: { url: config.MENU_AUDIO_URL },
          mimetype: 'audio/mp4',
          ptt: true
        },
        { quoted: mek }
      );
    }

  } catch (e) {
    console.error('Menu Error:', e.message);
    await reply(`‚ùå ·¥á Ä Ä·¥è Ä: ${e.message}`);
  }
});
